/*
mm_MPC : A fast customized optimization solver.

Copyright (C) 2013-2020 EMBOTECH AG [info@embotech.com]. All rights reserved.


This software is intended for simulation and testing purposes only. 
Use of this software for any commercial purpose is prohibited.

This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

/* Generated by FORCES PRO v3.0.1 on Wednesday, July 8, 2020 at 12:14:21 PM */

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#endif

#ifndef mm_MPC_H
#define mm_MPC_H

/* DATA TYPE ------------------------------------------------------------*/
typedef double mm_MPC_float;

typedef double mm_MPCinterface_float;

#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif


/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_mm_MPC
#define MISRA_C_mm_MPC (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_mm_MPC
#define RESTRICT_CODE_mm_MPC (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_mm_MPC
#define SET_PRINTLEVEL_mm_MPC    (2)
#endif

/* timing */
#ifndef SET_TIMING_mm_MPC
#define SET_TIMING_mm_MPC    (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_mm_MPC			(500)	

/* scaling factor of line search (FTB rule) */
#define SET_FLS_SCALE_mm_MPC		(mm_MPC_float)(0.99)      

/* maximum number of supported elements in the filter */
#define MAX_FILTER_SIZE_mm_MPC	(500) 

/* maximum number of supported elements in the filter */
#define MAX_SOC_IT_mm_MPC			(4) 

/* desired relative duality gap */
#define SET_ACC_RDGAP_mm_MPC		(mm_MPC_float)(0.0001)

/* desired maximum residual on equality constraints */
#define SET_ACC_RESEQ_mm_MPC		(mm_MPC_float)(1E-06)

/* desired maximum residual on inequality constraints */
#define SET_ACC_RESINEQ_mm_MPC	(mm_MPC_float)(1E-06)

/* desired maximum violation of complementarity */
#define SET_ACC_KKTCOMPL_mm_MPC	(mm_MPC_float)(1E-06)


/* RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_mm_MPC      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_mm_MPC (0)

/* wrong number of inequalities error */
#define INVALID_NUM_INEQ_ERROR_mm_MPC  (-4)

/* factorization error */
#define FACTORIZATION_ERROR_mm_MPC   (-5)

/* NaN encountered in function evaluations */
#define BADFUNCEVAL_mm_MPC  (-6)

/* no progress in method possible */
#define NOPROGRESS_mm_MPC   (-7)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_mm_MPC   (-11)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_mm_MPC  (-100)

/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct
{
    /* vector of size 20 */
    mm_MPC_float xinit[20];

    /* vector of size 400 */
    mm_MPC_float x0[400];

    /* vector of size 400 */
    mm_MPC_float all_parameters[400];


} mm_MPC_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct
{
    /* vector of size 20 */
    mm_MPC_float x01[20];

    /* vector of size 20 */
    mm_MPC_float x02[20];

    /* vector of size 20 */
    mm_MPC_float x03[20];

    /* vector of size 20 */
    mm_MPC_float x04[20];

    /* vector of size 20 */
    mm_MPC_float x05[20];

    /* vector of size 20 */
    mm_MPC_float x06[20];

    /* vector of size 20 */
    mm_MPC_float x07[20];

    /* vector of size 20 */
    mm_MPC_float x08[20];

    /* vector of size 20 */
    mm_MPC_float x09[20];

    /* vector of size 20 */
    mm_MPC_float x10[20];

    /* vector of size 20 */
    mm_MPC_float x11[20];

    /* vector of size 20 */
    mm_MPC_float x12[20];

    /* vector of size 20 */
    mm_MPC_float x13[20];

    /* vector of size 20 */
    mm_MPC_float x14[20];

    /* vector of size 20 */
    mm_MPC_float x15[20];

    /* vector of size 20 */
    mm_MPC_float x16[20];

    /* vector of size 20 */
    mm_MPC_float x17[20];

    /* vector of size 20 */
    mm_MPC_float x18[20];

    /* vector of size 20 */
    mm_MPC_float x19[20];

    /* vector of size 20 */
    mm_MPC_float x20[20];


} mm_MPC_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct
{
    /* iteration number */
    solver_int32_default it;

	/* number of iterations needed to optimality (branch-and-bound) */
	solver_int32_default it2opt;
	
    /* inf-norm of equality constraint residuals */
    mm_MPC_float res_eq;
	
    /* inf-norm of inequality constraint residuals */
    mm_MPC_float res_ineq;

	/* norm of stationarity condition */
    mm_MPC_float rsnorm;

	/* max of all complementarity violations */
    mm_MPC_float rcompnorm;

    /* primal objective */
    mm_MPC_float pobj;	
	
    /* dual objective */
    mm_MPC_float dobj;	

    /* duality gap := pobj - dobj */
    mm_MPC_float dgap;		
	
    /* relative duality gap := |dgap / pobj | */
    mm_MPC_float rdgap;		

    /* duality measure */
    mm_MPC_float mu;

	/* duality measure (after affine step) */
    mm_MPC_float mu_aff;
	
    /* centering parameter */
    mm_MPC_float sigma;
	
    /* number of backtracking line search steps (affine direction) */
    solver_int32_default lsit_aff;
    
    /* number of backtracking line search steps (combined direction) */
    solver_int32_default lsit_cc;
    
    /* step size (affine direction) */
    mm_MPC_float step_aff;
    
    /* step size (combined direction) */
    mm_MPC_float step_cc;    

	/* solvertime */
	mm_MPC_float solvetime;   

	/* time spent in function evaluations */
	mm_MPC_float fevalstime;  

} mm_MPC_info;







/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* Time of Solver Generation: (UTC) Wednesday, July 8, 2020 12:14:23 PM */
/* User License expires on: (UTC) Wednesday, September 23, 2020 10:00:00 PM (approx.) (at the time of code generation) */
/* Solver Static License expires on: (UTC) Wednesday, September 23, 2020 10:00:00 PM (approx.) */
/* Solver Generation Request Id: 03636161-ceb4-482e-81ea-999660546767 */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif		

typedef void (*mm_MPC_extfunc)(mm_MPC_float* x, mm_MPC_float* y, mm_MPC_float* lambda, mm_MPC_float* params, mm_MPC_float* pobj, mm_MPC_float* g, mm_MPC_float* c, mm_MPC_float* Jeq, mm_MPC_float* h, mm_MPC_float* Jineq, mm_MPC_float* H, solver_int32_default stage, solver_int32_default iterations);

extern solver_int32_default mm_MPC_solve(mm_MPC_params *params, mm_MPC_output *output, mm_MPC_info *info, FILE *fs, mm_MPC_extfunc evalextfunctions_mm_MPC);	





#ifdef __cplusplus
}
#endif

#endif
