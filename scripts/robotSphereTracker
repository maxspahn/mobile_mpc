#! /usr/bin/env python

import rospy
from visualization_msgs.msg import Marker, MarkerArray
import numpy as np
import tf
import copy


class SphereRobotTracker(object):

    """Docstring for ObjectMover. """

    def __init__(self):
        """TODO: to be defined. """
        rospy.init_node("set_pose")
        self.rate = rospy.Rate(10)
        self.sphereNames = ["base_sphere", "base_sphere", "mmrobot_link2_sphere", "mmrobot_link7_sphere"]
        self.sphereMarkerPub_ = rospy.Publisher(
            "/mmrobot/spheres", MarkerArray, queue_size=10
        )
        self.tfList = tf.TransformListener()
        self.sphereStates = []
        for i in range(4):
            self.sphereStates.append(np.zeros((3, 1)))
        self.sphereSizes = np.array([0.8,0.8, 0.384*1.2, 0.6])
        self.createDefaultMsg()

    def getSphereState(self, frameName):
        try:
            (pos, quat) = self.tfList.lookupTransform("/map", frameName, rospy.Time(0))
        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
            rospy.loginfo("TF LOOKUP FAILED")
            return np.zeros(shape=(3, 1))
        return np.array(pos)

    def getSpheresState(self):
        for i in range(3, 4):
            self.sphereStates[i] = self.getSphereState(self.sphereNames[i])
            if (i == 0):
                self.sphereStates[i][2] = self.sphereStates[i][2] + 0.05
                self.sphereStates[i][0] = self.sphereStates[i][0] - 0.1
            if (i == 1):
                self.sphereStates[i][0] = self.sphereStates[i][0] + 0.1
                self.sphereStates[i][2] = self.sphereStates[i][2] + 0.05

    def createDefaultMsg(self):
        singleMarker = Marker()
        singleMarker.header.frame_id = "odom"
        singleMarker.type = Marker.SPHERE
        singleMarker.color.a = 0.8
        singleMarker.color.r = 0.0
        singleMarker.color.g = 1.0
        singleMarker.color.b = 1.0
        singleMarker.type = Marker.SPHERE
        singleMarker.pose.orientation.w = 1
        self.markerArray = MarkerArray()
        for i in range(4):
            t = copy.deepcopy(singleMarker)
            t.id = i+1
            t.pose.position.x = self.sphereStates[i][0]
            t.pose.position.y = self.sphereStates[i][1]
            t.pose.position.z = self.sphereStates[i][2]
            t.scale.x = self.sphereSizes[i]
            t.scale.y = self.sphereSizes[i]
            t.scale.z = self.sphereSizes[i]
            t.header.frame_id = "map"
            self.markerArray.markers.append(t)
        self.sphereMarkerPub_.publish(self.markerArray)

    def pubMarkers(self):
        for i in range(4):
            self.markerArray.markers[i].pose.position.x = self.sphereStates[i][0]
            self.markerArray.markers[i].pose.position.y = self.sphereStates[i][1]
            self.markerArray.markers[i].pose.position.z = self.sphereStates[i][2]
        self.sphereMarkerPub_.publish(self.markerArray)

    def run(self):
        while not rospy.is_shutdown():
            self.getSpheresState()
            self.pubMarkers()
            self.rate.sleep()
            self.sphereMarkerPub_.publish(self.markerArray)


if __name__ == "__main__":
    sphereTracker = SphereRobotTracker()
    sphereTracker.run()
