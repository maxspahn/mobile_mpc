#! /usr/bin/env python

import rospy
import sys

# Brings in the SimpleActionClient
import actionlib
import numpy as np

from std_msgs.msg import Float64MultiArray, Float64
from mm_msgs.msg import MobileRobotPose

# Brings in the messages used by the fibonacci action, including the
# goal message and the result message.
import mobile_mpc.msg


def createRandomArmConfig():
    q_lim_franka_up = 0.8 * np.array(
        [2.8973, 1.7628, 2.8973, -0.0698, 2.8973, 3.7525, 2.8973]
    )
    q_lim_franka_low = 0.8 * np.array(
        [-2.8973, -1.7628, -2.8973, -3.0718, -2.8973, -0.0175, -2.8973]
    )
    q_goal = q_lim_franka_low + np.random.rand(7) * (q_lim_franka_up - q_lim_franka_low)
    return q_goal

def homePose():
    q_lim_franka_up = 0.8 * np.array(
        [2.8973, 1.7628, 2.8973, -0.0698, 2.8973, 3.7525, 2.8973]
    )
    q_lim_franka_low = 0.8 * np.array(
        [-2.8973, -1.7628, -2.8973, -3.0718, -2.8973, -0.0175, -2.8973]
    )
    q_goal = (q_lim_franka_low + q_lim_franka_up) / 2.0
    return q_goal

def foldedPose():
    q = homePose()
    q[1] = 0.5
    q[3] = -2.5
    return q

def stretchedPose():
    q = homePose()
    q[1] = 0.0
    q[3] = 0.0
    q[5] = 2.0
    return q

def graspPoseRight():
    # grasp right side
    q_goal = np.array(
        [
            -np.pi / 2.0,
            np.pi / 7.0,
            0,
            -2.0 * np.pi / 4.0,
            0,
            3.0 * np.pi / 4.0,
            3.0 * np.pi / 4.0,
        ]
    )
    return q_goal


def mpc_client(x=0.0, y=0.0, theta=0.0):
    client = actionlib.SimpleActionClient(
        "simpleMpc_server", mobile_mpc.msg.simpleMpcAction
    )

    client.wait_for_server()
    goalPose = MobileRobotPose()
    goalPose.basePose.x = x
    goalPose.basePose.y = y
    goalPose.basePose.theta = theta
    goalPose.armConfig = Float64MultiArray(data=homePose())

    goal = mobile_mpc.msg.simpleMpcGoal(motionType="navigation", goalPose=goalPose)
    # goal = mobile_mpc.msg.simpleMpcGoal(motionType="baseMotion", goalPose=goalPose)

    client.send_goal(goal)

    client.wait_for_result()

    result = client.get_result()
    print("Result:", result.success)
    print("Execution Time : ", result.executionTime)
    return client.get_result()


if __name__ == "__main__":
    try:
        rospy.init_node("simpleMpc_client_node")
        x_des = float(sys.argv[1])
        y_des = float(sys.argv[2])
        theta_des = float(sys.argv[3])
        result = mpc_client(x=x_des, y=y_des, theta=theta_des)
    except rospy.ROSInterruptException:
        print("program interrupted before completion")
